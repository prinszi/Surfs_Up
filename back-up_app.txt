import numpy as np
import pandas as pd
import datetime as dt
import sqlalchemy
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import Session
from sqlalchemy import create_engine, func, desc

from flask import Flask, jsonify

app = Flask(__name__)



@app.route("/")
def home():
    return (
        f"Welcome to Hawaii! Check out all these gnarly links!<br/>"
        f"/api/v1.0/precipitation<br/>"
        f"/api/v1.0/stations<br/>"
        f"/api/v1.0/tobs<br/>"
        f"for the next query, please provide a start date in the following format 'YYYY-MM-DD'<br/>"
        f"/api/v1.0/<start><br/>"
        f"for the next query, please provide a start and end date in the following format 'YYYY-MM-DD/YYYY-MM-DD'<br/>"
        f"/api/v1.0/<start>/<end><br/>"
    )
@app.route("/api/v1.0/precipitation")
def prcp():
    engine = create_engine("sqlite:///Resources/hawaii.sqlite")
    Base = automap_base()
    Base.prepare(engine, reflect=True)
    Measurement = Base.classes.measurement
    Station = Base.classes.station
    session = Session(engine)
    date = session.query(Measurement.date).filter(Measurement.date).order_by(Measurement.date.desc()).first()
    date_time = dt.datetime.strptime(date[0], '%Y-%m-%d')
    query_date = date_time-dt.timedelta(days=365)
    rain = session.query(Measurement.date, Measurement.prcp).filter(func.strftime("%Y-%m-%d", Measurement.date) >= query_date).order_by(Measurement.date).all()
    prcp_dict = dict(rain)
    return jsonify(prcp_dict)

@app.route("/api/v1.0/stations")
def stations():
    engine = create_engine("sqlite:///Resources/hawaii.sqlite")
    Base = automap_base()
    Base.prepare(engine, reflect=True)
    Measurement = Base.classes.measurement
    Station = Base.classes.station
    session = Session(engine)
    station_list = session.query(Station.station, Station.name).all()
    station_dict = dict(station_list)
    return jsonify(station_dict)

@app.route("/api/v1.0/tobs")
def tobs():
    engine = create_engine("sqlite:///Resources/hawaii.sqlite")
    Base = automap_base()
    Base.prepare(engine, reflect=True)
    Measurement = Base.classes.measurement
    Station = Base.classes.station
    session = Session(engine)
    date_tobs = session.query(Measurement.date).filter(Measurement.date).order_by(Measurement.date.desc()).first()
    date_time_tobs = dt.datetime.strptime(date_tobs[0], '%Y-%m-%d')
    query_date_tobs = date_time_tobs-dt.timedelta(days=365)
    most_tobs = session.query(Measurement.station, func.count(Measurement.tobs)).filter(Measurement.tobs != "Null").group_by(Measurement.station).order_by(desc(func.count(Measurement.tobs))).all()
    tobs_12_mo = session.query(Measurement.date, Measurement.tobs).filter((func.strftime("%Y-%m-%d", Measurement.date) >= query_date_tobs) & (Measurement.station == most_tobs[0][0])).all()
    tobs_dict = dict(tobs_12_mo)
    return jsonify(tobs_dict)

@app.route("/api/v1.0/<start>")
def entry_date(start):
    engine = create_engine("sqlite:///Resources/hawaii.sqlite")
    Base = automap_base()
    Base.prepare(engine, reflect=True)
    Measurement = Base.classes.measurement
    Station = Base.classes.station
    session = Session(engine)
    tuple_dates = session.query(Measurement.date).all()
    list_of_dates = [i for (i,) in tuple_dates]
    search_term = dt.datetime.strptime(start, '%Y-%m-%d')
    for date in list_of_dates:
        match = dt.datetime.strptime(date, "%Y-%m-%d")
        
        if search_term == match:
                start_date = search_term.date()
                the_last_date = session.query(Measurement.date).filter(Measurement.date).order_by(Measurement.date.desc()).first()
                end_date = dt.datetime.strptime(the_last_date[0], "%Y-%m-%d").date()
                results = session.query(func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)).filter(Measurement.date >= start_date).filter(Measurement.date <= end_date).all()
                min_temp = results[0][0]
                avg_temp = results[0][1]
                max_temp = results[0][2]
                temp_dict = {"min_temp": min_temp,"avg_temp" : avg_temp,"max_temp" : max_temp}
                return jsonify(temp_dict)

    return jsonify({"error": f"{start} is not found, or not a valid date."}), 404

@app.route("/api/v1.0/<start>/<end>")
def date_range(start, end):
    engine = create_engine("sqlite:///Resources/hawaii.sqlite")
    Base = automap_base()
    Base.prepare(engine, reflect=True)
    Measurement = Base.classes.measurement
    Station = Base.classes.station
    session = Session(engine)
    tuple_dates = session.query(Measurement.date).all()
    list_of_dates = [i for (i,) in tuple_dates]
    start_search_term = dt.datetime.strptime(start, '%Y-%m-%d')
    end_search_term = dt.datetime.strptime(end, '%Y-%m-%d')
    for date in list_of_dates:
        match = dt.datetime.strptime(date, "%Y-%m-%d")

        if start_search_term == match:
            for date in list_of_dates:
                match2 = dt.datetime.strptime(date, "%Y-%m-%d")

                if end_search_term == match2:
                    start_date = start_search_term.date()
                    end_date = end_search_term.date()
                    results = session.query(func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)).filter(Measurement.date >= start_date).filter(Measurement.date <= end_date).all()
                    min_temp = results[0][0]
                    avg_temp = results[0][1]
                    max_temp = results[0][2]
                    temp_dict = {"min_temp": min_temp,"avg_temp" : avg_temp,"max_temp" : max_temp}
                    return jsonify(temp_dict)
                
            return jsonify({"error":f"{start} was found, however {end} is not found, or not a valid date"}), 404
       
    return jsonify({"error": f"{start} is not found, or not a valid date."}), 404

if __name__ == "__main__":
    app.run(debug=True)
